filter {

if "xyz" in [message] { drop { } }

        # Grok Level 1
        grok {
            match => {"message" => ["%{CISCOTIMESTAMP:ts} %{DATA:acs_host} %{DATA:entry_type} %{NUMBER} %{NUMBER} %{NUMBER}%{SPACE}%{GREEDYDATA:object}"]}    
        }
        
        # Grok Level 2
        grok {
                match => {"object" => ["%{TIMESTAMP_ISO8601:embedded_timestamp} %{ISO8601_TIMEZONE:embedded_timezone} %{NUMBER} %{NUMBER} %{LOGLEVEL:loglevel} %{DATA:embedded_message}, %{GREEDYDATA:embedded_object}"]}
                add_field => { "has_date" => "yes"}
        }

        #Strip quotes
        mutate {
            gsub => ["embedded_object","'",""]
        }
        
        #Fix empty values in embedded_object
        mutate {
            gsub => ["embedded_object","\=,","=None,"]
        }
        
        
        # Use the has_date field to parse the entry
        if ([has_date]) {

            kv {
                source => "embedded_object"
                field_split => ","
                trim_key => " "
                trim_value => " \{\}"
                allow_duplicate_values => false
            }

            #CmdSet
            if ([CmdSet]) {
                    kv {
                        source => "CmdSet"
                        trim_key => " "
                        include_brackets => false
                    }
                    
                    
                        if ([CmdArgAV]) {
                            mutate {
                                add_field => {
                                "CmdCLI" => "%{CmdAV} %{CmdArgAV}"
                                }
                            }
                            mutate {
                                gsub => ["CmdCLI",","," ",
                                        "CmdCLI","<cr>",""                            
                                ]
                            }
                        }
                         
            }
            
            if ([embedded_timestamp]) 
            {
                date {
                    match => [ "embedded_timestamp", "ISO8601" ]
                    target => "embedded_timestamp"
                    timezone => "%{embedded_timezone}"
                }
            }
                
            mutate {
                remove_field => ["object","embedded_object" ]
            }

            
        
        } else
        # No Date in the object field
        {
            kv {
                source => "object"
                trim_value => " \{\}"
                trim_key => " "
                field_split_pattern => "[,]"
                allow_duplicate_values => false
            }
    
            mutate {
                remove_field => ["object"]
            }
        }
        
    # Parse the Response objects
    if ([Response])
    {
        kv {
            source => "Response"
            field_split_pattern => "[;]"
            trim_key => " "
            target => "ResponseDetails"
            allow_duplicate_values => false
        }
    }
    
    date {
      match => [ "ts", "MMM dd HH:mm:ss" ]
      target => "cisco_timestamp"
    }
    
    mutate {
        remove_field => ["ts", "tags", "has_date"]
        # HANDLE LOWER CASE TO ALLOW FOR AGGREGATIONS
        lowercase => [ "User", "User-name","Username" ]
        copy => {"acs_host" => "[host][name]"}
    }
    
}
